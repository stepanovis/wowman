name: Deploy to Production

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup SSH key
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to server
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create deployment script
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e

        # Variables
        DEPLOY_PATH="${DEPLOY_PATH:-/opt/ovulo}"
        IMAGE_TAG="${GITHUB_REF_NAME:-latest}"
        REGISTRY="${REGISTRY}"
        IMAGE_NAME="${IMAGE_NAME}"

        echo "Deploying version: ${IMAGE_TAG}"

        # Navigate to deployment directory
        cd "${DEPLOY_PATH}"

        # Backup current .env file
        if [ -f .env ]; then
          cp .env .env.backup.$(date +%Y%m%d_%H%M%S)
        fi

        # Pull latest code
        git fetch --tags
        git checkout "${IMAGE_TAG}" || git checkout main

        # Login to GitHub Container Registry
        echo "${GITHUB_TOKEN}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

        # Pull latest image
        docker-compose pull bot

        # Stop current container
        docker-compose stop bot

        # Run database migrations
        docker-compose run --rm bot alembic upgrade head

        # Start new container
        docker-compose up -d bot

        # Health check
        sleep 10
        docker-compose ps bot

        # Cleanup old images
        docker image prune -f

        echo "Deployment completed successfully!"
        EOF

        # Copy and execute deployment script
        scp deploy.sh ${DEPLOY_USER}@${DEPLOY_HOST}:/tmp/deploy_ovulo.sh
        ssh ${DEPLOY_USER}@${DEPLOY_HOST} "chmod +x /tmp/deploy_ovulo.sh && /tmp/deploy_ovulo.sh && rm /tmp/deploy_ovulo.sh"

    - name: Verify deployment
      run: |
        sleep 30
        ssh ${DEPLOY_USER}@${DEPLOY_HOST} "cd ${DEPLOY_PATH} && docker-compose ps && docker-compose logs --tail=50 bot"

    - name: Send notification
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: 'Deployment to ${{ github.event.inputs.environment || 'production' }} ${{ job.status }}'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      continue-on-error: true