name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ovulo_user
          POSTGRES_PASSWORD: ovulo_password_test
          POSTGRES_DB: ovulo_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        # Bot configuration
        BOT_TOKEN=test_bot_token_12345

        # Database configuration
        DATABASE_HOST=localhost
        DATABASE_PORT=5432
        DATABASE_NAME=ovulo_test
        DATABASE_USER=ovulo_user
        DATABASE_PASSWORD=ovulo_password_test

        # Application settings
        ENV=test
        DEBUG=True

        # Notification settings
        NOTIFICATION_TIME=09:00
        NOTIFICATION_CHECK_INTERVAL=60

        # Timezone
        DEFAULT_TIMEZONE=Europe/Moscow
        EOF

    - name: Run database migrations
      env:
        DATABASE_URL: postgresql://ovulo_user:ovulo_password_test@localhost:5432/ovulo_test
      run: |
        alembic upgrade head

    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://ovulo_user:ovulo_password_test@localhost:5432/ovulo_test
        BOT_TOKEN: test_bot_token_12345
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-report
        path: htmlcov/