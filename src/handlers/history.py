"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–∏–∫–ª–æ–≤
"""
from utils.logger import get_logger
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
from datetime import datetime

from database.crud import get_user, get_user_cycles
from database.session import db_session

logger = get_logger(__name__)

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
CYCLES_PER_PAGE = 10


async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history"""
    telegram_id = update.effective_user.id

    with db_session.get_session() as session:
        user = get_user(telegram_id=telegram_id, session=session)

        if not user:
            await update.message.reply_text(
                "‚ùå –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ü–∏–∫–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è, –Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
        cycles = get_user_cycles(session, user.id)

        if not cycles:
            await update.message.reply_text(
                "üìö *–ò—Å—Ç–æ—Ä–∏—è —Ü–∏–∫–ª–æ–≤*\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏–∫–ª–∞.",
                parse_mode='Markdown'
            )
            return

        # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await show_history_page(update.message, cycles, 0)


async def show_history_page(message, cycles, page):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏ —Ü–∏–∫–ª–æ–≤"""
    total_cycles = len(cycles)
    total_pages = (total_cycles + CYCLES_PER_PAGE - 1) // CYCLES_PER_PAGE

    # –ü–æ–ª—É—á–∞–µ–º —Ü–∏–∫–ª—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * CYCLES_PER_PAGE
    end_idx = min(start_idx + CYCLES_PER_PAGE, total_cycles)
    page_cycles = cycles[start_idx:end_idx]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = f"üìö *–ò—Å—Ç–æ—Ä–∏—è —Ü–∏–∫–ª–æ–≤* (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages})\n\n"

    for i, cycle in enumerate(page_cycles, start=start_idx + 1):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ü–∏–∫–ª–∞
        if cycle.is_current:
            status = "‚úÖ –¢–µ–∫—É—â–∏–π"
        else:
            status = "üìã –ó–∞–≤–µ—Ä—à–µ–Ω"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        start_date = cycle.start_date.strftime('%d.%m.%Y')

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ü–∏–∫–ª–∞
        end_date = cycle.start_date
        from datetime import timedelta
        end_date = (cycle.start_date + timedelta(days=cycle.cycle_length - 1)).strftime('%d.%m.%Y')

        text += (
            f"*–¶–∏–∫–ª #{i}* {status}\n"
            f"üìÖ –ù–∞—á–∞–ª–æ: {start_date}\n"
            f"üìÖ –ö–æ–Ω–µ—Ü: {end_date}\n"
            f"‚è± –î–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞: {cycle.cycle_length} –¥–Ω–µ–π\n"
            f"ü©∏ –î–ª–∏–Ω–∞ –º–µ—Å—è—á–Ω—ã—Ö: {cycle.period_length} –¥–Ω–µ–π\n"
            f"üïê –°–æ–∑–¥–∞–Ω: {cycle.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"\n"
        )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = []
    nav_buttons = []

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"history_page_{page - 1}")
        )

    # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
    if page < total_pages - 1:
        nav_buttons.append(
            InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"history_page_{page + 1}")
        )

    if nav_buttons:
        keyboard.append(nav_buttons)

    # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    keyboard.append([InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="history_close")])

    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if hasattr(message, 'edit_text'):
        await message.edit_text(
            text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    else:
        await message.reply_text(
            text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )


async def history_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏"""
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == "history_close":
        await query.message.delete()
        return

    if data.startswith("history_page_"):
        page = int(data.replace("history_page_", ""))
        telegram_id = update.effective_user.id

        with db_session.get_session() as session:
            user = get_user_by_telegram_id(session, telegram_id)
            if user:
                cycles = get_user_cycles(session, user.id)
                await show_history_page(query.message, cycles, page)


def setup_history_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏"""
    application.add_handler(CommandHandler("history", history_command))
    application.add_handler(CallbackQueryHandler(history_callback, pattern="^history_"))