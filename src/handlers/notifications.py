"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /notifications –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤–∫–ª—é—á–∞—Ç—å –∏ –≤—ã–∫–ª—é—á–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
"""
from utils.logger import get_logger
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
from database.crud import (
    get_user,
    get_user_notification_settings,
    update_notification_setting,
    get_current_cycle
)
from notifications.types import NotificationType, get_notification_message
from notifications.scheduler_utils import (
    calculate_notification_time,
    calculate_notification_job_id
)

logger = get_logger(__name__)

# Mapping for human-readable notification names in Russian
NOTIFICATION_NAMES = {
    NotificationType.PERIOD_REMINDER: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –º–µ—Å—è—á–Ω—ã—Ö",
    NotificationType.PERIOD_START: "–ù–∞—á–∞–ª–æ –º–µ—Å—è—á–Ω—ã—Ö",
    NotificationType.FERTILE_WINDOW_START: "–ù–∞—á–∞–ª–æ —Ñ–µ—Ä—Ç–∏–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞",
    NotificationType.OVULATION_DAY: "–î–µ–Ω—å –æ–≤—É–ª—è—Ü–∏–∏",
    NotificationType.SAFE_PERIOD: "–ù–∞—á–∞–ª–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"
}


async def notifications_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /notifications - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏."""
    telegram_id = update.effective_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user = get_user(telegram_id)
    if not user:
        await update.message.reply_text(
            "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–π —Ü–∏–∫–ª —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /setup"
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª
    current_cycle = get_current_cycle(user.id)
    if not current_cycle:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ü–∏–∫–ª —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /setup"
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    settings = get_user_notification_settings(user.id)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    keyboard = []

    for notification_type in NotificationType:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        setting = next(
            (s for s in settings if s.notification_type == notification_type.value),
            None
        )
        is_enabled = setting.is_enabled if setting else True

        # –°–∏–º–≤–æ–ª —Å—Ç–∞—Ç—É—Å–∞
        status_emoji = "‚úÖ" if is_enabled else "‚ùå"

        # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        button_text = f"{status_emoji} {NOTIFICATION_NAMES[notification_type]}"

        # Callback data –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏
        callback_data = f"toggle_notification_{notification_type.value}"

        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
    keyboard.append([InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö", callback_data="notification_info")])
    keyboard.append([InlineKeyboardButton("üîô –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_notifications")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    message_text = (
        "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:\n\n"
        "‚úÖ - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ\n"
        "‚ùå - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å."
    )

    await update.message.reply_text(
        message_text,
        parse_mode="HTML",
        reply_markup=reply_markup
    )


async def toggle_notification_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ callback_data
    callback_data = query.data
    if not callback_data.startswith("toggle_notification_"):
        return

    notification_type_value = callback_data.replace("toggle_notification_", "")

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    telegram_id = update.effective_user.id
    user = get_user(telegram_id)
    if not user:
        await query.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª
    current_cycle = get_current_cycle(user.id)
    if not current_cycle:
        await query.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    settings = get_user_notification_settings(user.id)
    setting = next(
        (s for s in settings if s.notification_type == notification_type_value),
        None
    )

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    current_status = setting.is_enabled if setting else True
    new_status = not current_status

    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –ë–î
    update_notification_setting(user.id, notification_type_value, new_status)

    # –ü–æ–ª—É—á–∞–µ–º scheduler –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    scheduler = context.bot_data.get('scheduler')

    if scheduler:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∑–∞–¥–∞—á–∏
        job_id = calculate_notification_job_id(user.id, notification_type_value)

        if new_status:
            # –í–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ scheduler
            try:
                # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                notification_type = None
                for nt in NotificationType:
                    if nt.value == notification_type_value:
                        notification_type = nt
                        break

                if notification_type:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    notification_datetime = calculate_notification_time(
                        current_cycle,
                        notification_type,
                        user.timezone
                    )

                    if notification_datetime:
                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
                        await scheduler.add_notification_task(
                            user_id=user.id,
                            notification_type=notification_type,
                            run_date=notification_datetime,
                            context=context
                        )
                        logger.info(f"Enabled notification {notification_type_value} for user {user.id}")
            except Exception as e:
                logger.error(f"Error enabling notification: {e}")
                await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", show_alert=True)
                return
        else:
            # –í—ã–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ scheduler
            try:
                scheduler.remove_job(job_id)
                logger.info(f"Disabled notification {notification_type_value} for user {user.id}")
            except Exception as e:
                # –ó–∞–¥–∞—á–∞ –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                logger.debug(f"Could not remove job {job_id}: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    settings = get_user_notification_settings(user.id)
    keyboard = []

    for notification_type in NotificationType:
        setting = next(
            (s for s in settings if s.notification_type == notification_type.value),
            None
        )
        is_enabled = setting.is_enabled if setting else True
        status_emoji = "‚úÖ" if is_enabled else "‚ùå"
        button_text = f"{status_emoji} {NOTIFICATION_NAMES[notification_type]}"
        callback_data = f"toggle_notification_{notification_type.value}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])

    keyboard.append([InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö", callback_data="notification_info")])
    keyboard.append([InlineKeyboardButton("üîô –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_notifications")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_reply_markup(reply_markup=reply_markup)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    notification_name = NOTIFICATION_NAMES.get(
        next((nt for nt in NotificationType if nt.value == notification_type_value), None),
        "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
    )
    status_text = "–≤–∫–ª—é—á–µ–Ω–æ ‚úÖ" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω–æ ‚ùå"
    await query.answer(f"{notification_name} {status_text}")


async def notification_info_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–∞—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    query = update.callback_query
    await query.answer()

    info_text = "üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö:</b>\n\n"

    for notification_type in NotificationType:
        name = NOTIFICATION_NAMES[notification_type]
        description = get_notification_message(notification_type)
        info_text += f"<b>{name}:</b>\n{description}\n\n"

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_notifications")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        info_text,
        parse_mode="HTML",
        reply_markup=reply_markup
    )


async def back_to_notifications_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏."""
    query = update.callback_query
    await query.answer()

    telegram_id = update.effective_user.id
    user = get_user(telegram_id)
    if not user:
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    settings = get_user_notification_settings(user.id)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []

    for notification_type in NotificationType:
        setting = next(
            (s for s in settings if s.notification_type == notification_type.value),
            None
        )
        is_enabled = setting.is_enabled if setting else True
        status_emoji = "‚úÖ" if is_enabled else "‚ùå"
        button_text = f"{status_emoji} {NOTIFICATION_NAMES[notification_type]}"
        callback_data = f"toggle_notification_{notification_type.value}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])

    keyboard.append([InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö", callback_data="notification_info")])
    keyboard.append([InlineKeyboardButton("üîô –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_notifications")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    message_text = (
        "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:\n\n"
        "‚úÖ - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ\n"
        "‚ùå - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å."
    )

    await query.edit_message_text(
        message_text,
        parse_mode="HTML",
        reply_markup=reply_markup
    )


async def close_notifications_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")


def setup_notifications_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏."""
    # –ö–æ–º–∞–Ω–¥–∞ /notifications
    application.add_handler(CommandHandler("notifications", notifications_command))

    # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CallbackQueryHandler(
        toggle_notification_callback,
        pattern="^toggle_notification_"
    ))
    application.add_handler(CallbackQueryHandler(
        notification_info_callback,
        pattern="^notification_info$"
    ))
    application.add_handler(CallbackQueryHandler(
        back_to_notifications_callback,
        pattern="^back_to_notifications$"
    ))
    application.add_handler(CallbackQueryHandler(
        close_notifications_callback,
        pattern="^close_notifications$"
    ))