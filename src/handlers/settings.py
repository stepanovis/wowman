"""
Settings command handler for the Ovulo bot.
Provides interface for managing cycle parameters with inline calendar support.
"""

from utils.logger import get_logger
from datetime import datetime, date
from typing import Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    filters
)
from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP

from database.crud import get_user, get_current_cycle, update_cycle
from database.session import db_session
from handlers.setup import create_notification_tasks

# Configure logger
logger = get_logger(__name__)

# Conversation states
CHOOSING_ACTION = 0
UPDATING_DATE = 1
UPDATING_CYCLE_LENGTH = 2
UPDATING_PERIOD_LENGTH = 3

# Calendar settings
CALENDAR_CALLBACK = "calendar"


class CustomCalendar(DetailedTelegramCalendar):
    """Custom calendar with Russian localization and date validation."""

    # Russian month names
    MONTHS = {
        1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å",
        5: "–ú–∞–π", 6: "–ò—é–Ω—å", 7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç",
        9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
    }

    # Russian day names
    DAYS = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]

    def __init__(self, **kwargs):
        """Initialize calendar with max date restriction."""
        super().__init__(**kwargs)
        # Set maximum date to today (cannot select future dates)
        self.max_date = date.today()


async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    Handle /settings command - show settings menu.

    Args:
        update: Telegram update object
        context: Bot context

    Returns:
        Conversation state
    """
    telegram_id = update.effective_user.id

    try:
        # Get user from database
        with db_session.get_session() as session:
            user = get_user(telegram_id=telegram_id, session=session)

            if not user:
                await update.message.reply_text(
                    "‚ö†Ô∏è –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
                )
                return ConversationHandler.END

            # Get current cycle
            cycle = get_current_cycle(user_id=user.id, session=session)

            if not cycle:
                await update.message.reply_text(
                    "üìä –£ –≤–∞—Å –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ü–∏–∫–ª.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setup –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
                )
                return ConversationHandler.END

            # Create settings menu
            keyboard = [
                [InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ü–∏–∫–ª–∞", callback_data="change_date")],
                [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏–Ω—É —Ü–∏–∫–ª–∞", callback_data="change_cycle_length")],
                [InlineKeyboardButton("ü©∏ –ò–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏–Ω—É –º–µ—Å—è—á–Ω—ã—Ö", callback_data="change_period_length")],
                [InlineKeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="show_settings")],
                [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # Format current settings
            settings_text = (
                "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ —Ü–∏–∫–ª–∞</b>\n\n"
                f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Å—è—á–Ω—ã—Ö: <b>{cycle.start_date.strftime('%d.%m.%Y')}</b>\n"
                f"üîÑ –î–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞: <b>{cycle.cycle_length} –¥–Ω–µ–π</b>\n"
                f"ü©∏ –î–ª–∏–Ω–∞ –º–µ—Å—è—á–Ω—ã—Ö: <b>{cycle.period_length} –¥–Ω–µ–π</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
            )

            await update.message.reply_text(
                settings_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )

            return CHOOSING_ACTION

    except Exception as e:
        logger.error(f"Error in settings_command: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END


async def handle_settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    Handle settings menu button clicks.

    Args:
        update: Telegram update object
        context: Bot context

    Returns:
        Conversation state
    """
    query = update.callback_query
    await query.answer()

    telegram_id = update.effective_user.id

    if query.data == "close":
        await query.message.edit_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã.")
        return ConversationHandler.END

    try:
        with db_session.get_session() as session:
            user = get_user(telegram_id=telegram_id, session=session)
            cycle = get_current_cycle(user_id=user.id, session=session)

            if query.data == "show_settings":
                # Show current settings
                settings_text = (
                    "üìä <b>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
                    f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Å—è—á–Ω—ã—Ö: <b>{cycle.start_date.strftime('%d.%m.%Y')}</b>\n"
                    f"üîÑ –î–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞: <b>{cycle.cycle_length} –¥–Ω–µ–π</b>\n"
                    f"ü©∏ –î–ª–∏–Ω–∞ –º–µ—Å—è—á–Ω—ã—Ö: <b>{cycle.period_length} –¥–Ω–µ–π</b>\n\n"
                    f"üïê –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: {cycle.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                )

                if cycle.updated_at:
                    settings_text += f"‚úèÔ∏è –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {cycle.updated_at.strftime('%d.%m.%Y %H:%M')}\n"

                # Calculate next period
                next_period = cycle.get_next_period_date()
                if next_period:
                    settings_text += f"\nüìÖ –°–ª–µ–¥—É—é—â–∏–µ –º–µ—Å—è—á–Ω—ã–µ: <b>{next_period.strftime('%d.%m.%Y')}</b>"

                # Add back button
                keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.message.edit_text(
                    settings_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
                return CHOOSING_ACTION

            elif query.data == "back_to_menu":
                # Return to main settings menu
                keyboard = [
                    [InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ü–∏–∫–ª–∞", callback_data="change_date")],
                    [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏–Ω—É —Ü–∏–∫–ª–∞", callback_data="change_cycle_length")],
                    [InlineKeyboardButton("ü©∏ –ò–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏–Ω—É –º–µ—Å—è—á–Ω—ã—Ö", callback_data="change_period_length")],
                    [InlineKeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="show_settings")],
                    [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                settings_text = (
                    "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ —Ü–∏–∫–ª–∞</b>\n\n"
                    f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: <b>{cycle.start_date.strftime('%d.%m.%Y')}</b>\n"
                    f"üîÑ –î–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞: <b>{cycle.cycle_length} –¥–Ω–µ–π</b>\n"
                    f"ü©∏ –î–ª–∏–Ω–∞ –º–µ—Å—è—á–Ω—ã—Ö: <b>{cycle.period_length} –¥–Ω–µ–π</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
                )

                await query.message.edit_text(
                    settings_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
                return CHOOSING_ACTION

            elif query.data == "change_date":
                # Store cycle_id in context for later use
                context.user_data['cycle_id'] = cycle.id

                # Show calendar for date selection
                calendar, step = CustomCalendar(
                    current_date=cycle.start_date,
                    locale='ru'
                ).build()

                await query.message.edit_text(
                    f"üìÖ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ —Ü–∏–∫–ª–∞</b>\n\n"
                    f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: <b>{cycle.start_date.strftime('%d.%m.%Y')}</b>\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Å—è—á–Ω—ã—Ö ({LSTEP[step]}):",
                    reply_markup=calendar,
                    parse_mode='HTML'
                )
                return UPDATING_DATE

            elif query.data == "change_cycle_length":
                # Store cycle_id in context
                context.user_data['cycle_id'] = cycle.id

                # Add cancel button
                keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.message.edit_text(
                    f"üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Ü–∏–∫–ª–∞</b>\n\n"
                    f"–¢–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞: <b>{cycle.cycle_length} –¥–Ω–µ–π</b>\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–ª–∏–Ω—É —Ü–∏–∫–ª–∞ (–æ—Ç 21 –¥–æ 40 –¥–Ω–µ–π):",
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
                return UPDATING_CYCLE_LENGTH

            elif query.data == "change_period_length":
                # Store cycle_id in context
                context.user_data['cycle_id'] = cycle.id

                # Add cancel button
                keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.message.edit_text(
                    f"ü©∏ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –º–µ—Å—è—á–Ω—ã—Ö</b>\n\n"
                    f"–¢–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞ –º–µ—Å—è—á–Ω—ã—Ö: <b>{cycle.period_length} –¥–Ω–µ–π</b>\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–ª–∏–Ω—É –º–µ—Å—è—á–Ω—ã—Ö (–æ—Ç 1 –¥–æ 10 –¥–Ω–µ–π):",
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
                return UPDATING_PERIOD_LENGTH

    except Exception as e:
        logger.error(f"Error in handle_settings_menu: {e}", exc_info=True)
        await query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END


async def handle_calendar(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    Handle calendar interactions for date selection.

    Args:
        update: Telegram update object
        context: Bot context

    Returns:
        Conversation state
    """
    query = update.callback_query

    # Process calendar callback
    result, key, step = CustomCalendar(locale='ru').process(query.data)

    if not result and key:
        # Calendar is still being navigated
        await query.message.edit_text(
            f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Å—è—á–Ω—ã—Ö ({LSTEP[step]}):",
            reply_markup=key,
            parse_mode='HTML'
        )
        return UPDATING_DATE
    elif result:
        # Date selected
        selected_date = result

        # Validate that date is not in the future
        if selected_date > date.today():
            await query.answer("‚ùå –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –±—É–¥—É—â—É—é –¥–∞—Ç—É!", show_alert=True)

            # Show calendar again
            calendar, step = CustomCalendar(
                current_date=date.today(),
                locale='ru'
            ).build()

            await query.message.edit_text(
                "üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Å—è—á–Ω—ã—Ö</b>\n\n"
                "‚ö†Ô∏è –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É ({LSTEP[step]}):",
                reply_markup=calendar,
                parse_mode='HTML'
            )
            return UPDATING_DATE

        # Update cycle in database
        cycle_id = context.user_data.get('cycle_id')
        if not cycle_id:
            await query.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ü–∏–∫–ª–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /settings"
            )
            return ConversationHandler.END

        try:
            updated_cycle = update_cycle(
                cycle_id=cycle_id,
                updates={'start_date': selected_date}
            )

            if updated_cycle:
                # Calculate next period
                next_period = updated_cycle.get_next_period_date()
                next_period_text = ""
                if next_period:
                    next_period_text = f"\nüìÖ –°–ª–µ–¥—É—é—â–∏–µ –º–µ—Å—è—á–Ω—ã–µ: <b>{next_period.strftime('%d.%m.%Y')}</b>"

                # Update notification tasks
                with db_session.get_session() as session:
                    user = get_user(telegram_id=update.effective_user.id, session=session)
                    if user:
                        await create_notification_tasks(user, updated_cycle, context)

                await query.message.edit_text(
                    f"‚úÖ <b>–î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
                    f"üìÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ü–∏–∫–ª–∞: <b>{selected_date.strftime('%d.%m.%Y')}</b>"
                    f"{next_period_text}\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n"
                    "–∏–ª–∏ /status –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ü–∏–∫–ª–∞.",
                    parse_mode='HTML'
                )
            else:
                await query.message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )

        except Exception as e:
            logger.error(f"Error updating cycle date: {e}", exc_info=True)
            await query.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

        return ConversationHandler.END

    return UPDATING_DATE


async def handle_cycle_length_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    Handle cycle length text input.

    Args:
        update: Telegram update object
        context: Bot context

    Returns:
        Conversation state
    """
    try:
        # Parse input
        cycle_length = int(update.message.text.strip())

        # Validate
        if not (21 <= cycle_length <= 40):
            await update.message.reply_text(
                "‚ö†Ô∏è –î–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 21 –¥–æ 40 –¥–Ω–µ–π.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
            )
            return UPDATING_CYCLE_LENGTH

        # Update in database
        cycle_id = context.user_data.get('cycle_id')
        if not cycle_id:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ü–∏–∫–ª–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /settings"
            )
            return ConversationHandler.END

        updated_cycle = update_cycle(
            cycle_id=cycle_id,
            updates={'cycle_length': cycle_length}
        )

        if updated_cycle:
            # Calculate next period
            next_period = updated_cycle.get_next_period_date()
            next_period_text = ""
            if next_period:
                next_period_text = f"\nüìÖ –°–ª–µ–¥—É—é—â–∏–µ –º–µ—Å—è—á–Ω—ã–µ: <b>{next_period.strftime('%d.%m.%Y')}</b>"

            # Update notification tasks
            with db_session.get_session() as session:
                user = get_user(telegram_id=update.effective_user.id, session=session)
                if user:
                    await create_notification_tasks(user, updated_cycle, context)

            await update.message.reply_text(
                f"‚úÖ <b>–î–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
                f"üîÑ –ù–æ–≤–∞—è –¥–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞: <b>{cycle_length} –¥–Ω–µ–π</b>"
                f"{next_period_text}\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n"
                "–∏–ª–∏ /status –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ü–∏–∫–ª–∞.",
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–ª–∏–Ω—É —Ü–∏–∫–ª–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 21 –¥–æ 40:"
        )
        return UPDATING_CYCLE_LENGTH
    except Exception as e:
        logger.error(f"Error updating cycle length: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–ª–∏–Ω—ã —Ü–∏–∫–ª–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END


async def handle_period_length_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    Handle period length text input.

    Args:
        update: Telegram update object
        context: Bot context

    Returns:
        Conversation state
    """
    try:
        # Parse input
        period_length = int(update.message.text.strip())

        # Validate
        if not (1 <= period_length <= 10):
            await update.message.reply_text(
                "‚ö†Ô∏è –î–ª–∏–Ω–∞ –º–µ—Å—è—á–Ω—ã—Ö –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10 –¥–Ω–µ–π.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
            )
            return UPDATING_PERIOD_LENGTH

        # Update in database
        cycle_id = context.user_data.get('cycle_id')
        if not cycle_id:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ü–∏–∫–ª–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /settings"
            )
            return ConversationHandler.END

        updated_cycle = update_cycle(
            cycle_id=cycle_id,
            updates={'period_length': period_length}
        )

        if updated_cycle:
            # Update notification tasks
            with db_session.get_session() as session:
                user = get_user(telegram_id=update.effective_user.id, session=session)
                if user:
                    await create_notification_tasks(user, updated_cycle, context)

            await update.message.reply_text(
                f"‚úÖ <b>–î–ª–∏–Ω–∞ –º–µ—Å—è—á–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
                f"ü©∏ –ù–æ–≤–∞—è –¥–ª–∏–Ω–∞ –º–µ—Å—è—á–Ω—ã—Ö: <b>{period_length} –¥–Ω–µ–π</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n"
                "–∏–ª–∏ /status –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ü–∏–∫–ª–∞.",
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–ª–∏–Ω—É –º–µ—Å—è—á–Ω—ã—Ö.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:"
        )
        return UPDATING_PERIOD_LENGTH
    except Exception as e:
        logger.error(f"Error updating period length: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–ª–∏–Ω—ã –º–µ—Å—è—á–Ω—ã—Ö.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    Cancel the conversation.

    Args:
        update: Telegram update object
        context: Bot context

    Returns:
        Conversation state (END)
    """
    # Handle both message and callback query
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.edit_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."
        )
    else:
        await update.message.reply_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."
        )

    # Clear user data
    context.user_data.clear()

    return ConversationHandler.END


# Create conversation handler for settings
settings_conversation_handler = ConversationHandler(
    entry_points=[CommandHandler("settings", settings_command)],
    states={
        CHOOSING_ACTION: [
            CallbackQueryHandler(handle_settings_menu, pattern="^(show_settings|back_to_menu|change_date|change_cycle_length|change_period_length|close)$")
        ],
        UPDATING_DATE: [
            CallbackQueryHandler(handle_calendar, pattern="^cbcal"),
            CallbackQueryHandler(cancel, pattern="^cancel$")
        ],
        UPDATING_CYCLE_LENGTH: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_cycle_length_input),
            CallbackQueryHandler(cancel, pattern="^cancel$")
        ],
        UPDATING_PERIOD_LENGTH: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_period_length_input),
            CallbackQueryHandler(cancel, pattern="^cancel$")
        ]
    },
    fallbacks=[
        CommandHandler("cancel", cancel),
        CallbackQueryHandler(cancel, pattern="^close$")
    ]
)