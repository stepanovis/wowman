"""
Handler for /start command.
Handles new user registration and welcome messages.
"""

from utils.logger import get_logger
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from database.crud import get_or_create_user

# Set up logging
logger = get_logger(__name__)


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Handle the /start command.
    Checks if user exists in DB, creates new user if not, and sends appropriate welcome message.

    Args:
        update: The update object from Telegram
        context: The context object from telegram.ext
    """
    if not update.effective_user:
        logger.warning("Received /start command without effective_user")
        return

    user_telegram_id = update.effective_user.id
    username = update.effective_user.username
    first_name = update.effective_user.first_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    try:
        # Get or create user in database
        db_user = get_or_create_user(
            telegram_id=user_telegram_id,
            username=username
        )

        if not db_user:
            logger.error(f"Failed to create/get user with telegram_id={user_telegram_id}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return

        # Check if this is a new user (commands_count would be 1 for new users)
        is_new_user = db_user.commands_count <= 1

        # Create inline keyboard with "Start Setup" button
        keyboard = [
            [InlineKeyboardButton("üéØ –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", callback_data="start_setup")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if is_new_user:
            # Welcome message for new users
            welcome_text = (
                f"–ü—Ä–∏–≤–µ—Ç, {first_name}! üëã\n\n"
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞!\n\n"
                "–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
                "‚Ä¢ üìÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à —Ü–∏–∫–ª\n"
                "‚Ä¢ üéØ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –æ–≤—É–ª—è—Ü–∏—é –∏ —Ñ–µ—Ä—Ç–∏–ª—å–Ω–æ–µ –æ–∫–Ω–æ\n"
                "‚Ä¢ üîî –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö –¥–∞—Ç–∞—Ö\n"
                "‚Ä¢ üìä –í–µ—Å—Ç–∏ –∏—Å—Ç–æ—Ä–∏—é —Ü–∏–∫–ª–æ–≤\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞—à–µ–≥–æ —Ü–∏–∫–ª–∞.\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É."
            )

            logger.info(f"New user registered: telegram_id={user_telegram_id}, username={username}")
        else:
            # Welcome message for existing users
            welcome_text = (
                f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name}! üëã\n\n"
                "–†–∞–¥ –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!\n\n"
                "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ü–∏–∫–ª–∞\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /history –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–∏–∫–ª–æ–≤\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /notifications –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏\n\n"
                "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤—ã–π —Ü–∏–∫–ª."
            )

            logger.info(f"Existing user returned: telegram_id={user_telegram_id}, username={username}")

        # Send the welcome message with inline keyboard
        await update.message.reply_text(
            text=welcome_text,
            reply_markup=reply_markup
        )

    except Exception as e:
        logger.error(f"Error in start_command: {e}", exc_info=True)
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def start_setup_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Handle the callback from "Start Setup" button.
    Opens the WebApp for cycle setup.

    Args:
        update: The update object from Telegram
        context: The context object from telegram.ext
    """
    from handlers.setup import setup_command

    query = update.callback_query
    await query.answer()

    # Delete the original message
    await query.delete_message()

    # Create a fake update object for setup_command
    # We need to trigger setup_command which expects update.message
    logger.info(f"User {update.effective_user.id} clicked start_setup button")

    # Send setup message directly by calling the setup logic
    user = update.effective_user

    # Import here to avoid circular imports
    from database.crud import get_user, get_current_cycle
    from database.session import db_session
    import os
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo

    # Check if user exists in database
    with db_session.get_session() as session:
        db_user = get_user(telegram_id=user.id, session=session)
        if not db_user:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return

    # Get WebApp URL from environment
    webapp_url = os.getenv('WEBAPP_URL', 'https://your-domain.com/webapp/setup_form.html')

    if webapp_url == 'https://your-domain.com/webapp/setup_form.html':
        logger.warning("Using default WebApp URL. Set WEBAPP_URL environment variable for production.")

    keyboard = [[
        InlineKeyboardButton(
            text="üå∏ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ü–∏–∫–ª–∞",
            web_app=WebAppInfo(url=webapp_url)
        )
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # Check if user already has a cycle configured
    with db_session.get_session() as session:
        db_user = get_user(telegram_id=user.id, session=session)
        if db_user:
            current_cycle = get_current_cycle(user_id=db_user.id, session=session)
            if current_cycle:
                message = (
                    "–£ –≤–∞—Å —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª:\n"
                    f"üìÖ –ù–∞—á–∞–ª–æ: {current_cycle.start_date.strftime('%d.%m.%Y')}\n"
                    f"üîÑ –î–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞: {current_cycle.cycle_length} –¥–Ω–µ–π\n"
                    f"ü©∏ –î–ª–∏–Ω–∞ –º–µ—Å—è—á–Ω—ã—Ö: {current_cycle.period_length} –¥–Ω–µ–π\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:"
                )
            else:
                message = (
                    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ü–∏–∫–ª–∞! üå∏\n\n"
                    "–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–≤—É–ª—è—Ü–∏–∏ –∏ —Ñ–µ—Ä—Ç–∏–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –º–Ω–µ –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º —Ü–∏–∫–ª–µ.\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
                )
        else:
            message = "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=message,
        reply_markup=reply_markup
    )