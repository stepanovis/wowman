"""
Handler for /status command that displays current cycle information.
Shows current phase, key dates, and cycle predictions.
"""

from utils.logger import get_logger
from datetime import date
from typing import Optional

from telegram import Update
from telegram.ext import ContextTypes

from database.crud import get_user, get_current_cycle
from utils.cycle_calculator import (
    calculate_cycle_dates,
    format_date_for_user,
    calculate_current_phase
)

logger = get_logger(__name__)


async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Handle /status command - shows current cycle information.

    Displays:
    - Current cycle phase
    - Date of last period
    - Date of next period
    - Ovulation date
    - Fertile window
    - Safe periods
    - Days until next period

    Args:
        update: Telegram update object
        context: Bot context
    """
    if not update.effective_user:
        logger.error("No effective user in update")
        return

    telegram_id = update.effective_user.id
    logger.info(f"User {telegram_id} requested cycle status")

    try:
        # Get user from database
        user = get_user(telegram_id=telegram_id)

        if not user:
            await update.message.reply_text(
                "üö´ –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
            )
            return

        # Get current cycle
        current_cycle = get_current_cycle(user_id=user.id)

        if not current_cycle:
            await update.message.reply_text(
                "üìä –£ –≤–∞—Å –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω—ã–π —Ü–∏–∫–ª.\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞—à–µ–≥–æ —Ü–∏–∫–ª–∞.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setup –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
            )
            return

        # Calculate all cycle dates and current phase
        cycle_data = calculate_cycle_dates(current_cycle)
        current_phase = cycle_data['current_phase']

        # Format phase emoji
        phase_emojis = {
            'menstruation': 'üî¥',
            'follicular': 'üü°',
            'ovulation': 'üíö',
            'luteal': 'üü†',
            'pre_menstruation': 'üü£'
        }
        phase_emoji = phase_emojis.get(current_phase['phase'], '‚ö™')

        # Build status message
        message_parts = [
            f"üìä <b>–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ —Ü–∏–∫–ª–∞</b>\n",
            f"\n{phase_emoji} <b>–¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞:</b> {current_phase['description']}",
            f"üìÖ <b>–î–µ–Ω—å —Ü–∏–∫–ª–∞:</b> {current_phase['day']} –∏–∑ {cycle_data['cycle_length']}"
        ]

        # Add fertility status
        if current_phase['is_fertile']:
            message_parts.append("\n‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ñ–µ—Ä—Ç–∏–ª—å–Ω–æ–º –æ–∫–Ω–µ!")
        elif current_phase['is_safe']:
            message_parts.append("\n‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–∏–æ–¥")

        message_parts.append("\n")

        # Key dates section
        message_parts.append("\nüìÜ <b>–ö–ª—é—á–µ–≤—ã–µ –¥–∞—Ç—ã:</b>")

        # Last period
        message_parts.append(
            f"\nüî¥ <b>–ù–∞—á–∞–ª–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Å—è—á–Ω—ã—Ö:</b>\n"
            f"   {format_date_for_user(cycle_data['start_date'])}"
        )

        # Ovulation
        today = date.today()
        if cycle_data['ovulation_date'] >= today:
            days_until_ovulation = (cycle_data['ovulation_date'] - today).days
            if days_until_ovulation == 0:
                ovulation_text = "—Å–µ–≥–æ–¥–Ω—è!"
            elif days_until_ovulation == 1:
                ovulation_text = "–∑–∞–≤—Ç—Ä–∞"
            else:
                ovulation_text = f"—á–µ—Ä–µ–∑ {days_until_ovulation} –¥–Ω–µ–π"

            message_parts.append(
                f"\nüíö <b>–û–≤—É–ª—è—Ü–∏—è:</b>\n"
                f"   {format_date_for_user(cycle_data['ovulation_date'])} ({ovulation_text})"
            )
        else:
            message_parts.append(
                f"\nüíö <b>–û–≤—É–ª—è—Ü–∏—è –±—ã–ª–∞:</b>\n"
                f"   {format_date_for_user(cycle_data['ovulation_date'])}"
            )

        # Next period
        days_until_period = current_phase['days_until_period']
        if days_until_period == 0:
            period_text = "—Å–µ–≥–æ–¥–Ω—è!"
        elif days_until_period == 1:
            period_text = "–∑–∞–≤—Ç—Ä–∞"
        elif days_until_period < 0:
            period_text = f"–∑–∞–¥–µ—Ä–∂–∫–∞ {abs(days_until_period)} –¥–Ω–µ–π"
        else:
            period_text = f"—á–µ—Ä–µ–∑ {days_until_period} –¥–Ω–µ–π"

        message_parts.append(
            f"\nüî¥ <b>–°–ª–µ–¥—É—é—â–∏–µ –º–µ—Å—è—á–Ω—ã–µ:</b>\n"
            f"   {format_date_for_user(cycle_data['next_period'])} ({period_text})"
        )

        # Fertile window
        message_parts.append("\n")
        fertile_start = cycle_data['fertile_window']['start']
        fertile_end = cycle_data['fertile_window']['end']

        if fertile_start <= today <= fertile_end:
            message_parts.append(
                f"\nüå∏ <b>–§–µ—Ä—Ç–∏–ª—å–Ω–æ–µ –æ–∫–Ω–æ (—Ç–µ–∫—É—â–µ–µ):</b>\n"
                f"   –° {format_date_for_user(fertile_start, include_weekday=False)}\n"
                f"   –ü–æ {format_date_for_user(fertile_end, include_weekday=False)}"
            )
        elif fertile_start > today:
            days_until_fertile = (fertile_start - today).days
            message_parts.append(
                f"\nüå∏ <b>–§–µ—Ä—Ç–∏–ª—å–Ω–æ–µ –æ–∫–Ω–æ (—á–µ—Ä–µ–∑ {days_until_fertile} –¥–Ω–µ–π):</b>\n"
                f"   –° {format_date_for_user(fertile_start, include_weekday=False)}\n"
                f"   –ü–æ {format_date_for_user(fertile_end, include_weekday=False)}"
            )
        else:
            message_parts.append(
                f"\nüå∏ <b>–§–µ—Ä—Ç–∏–ª—å–Ω–æ–µ –æ–∫–Ω–æ –±—ã–ª–æ:</b>\n"
                f"   –° {format_date_for_user(fertile_start, include_weekday=False)}\n"
                f"   –ü–æ {format_date_for_user(fertile_end, include_weekday=False)}"
            )

        # Safe periods
        first_safe = cycle_data['safe_periods']['first']
        second_safe = cycle_data['safe_periods']['second']

        if first_safe or second_safe:
            message_parts.append("\n")
            message_parts.append("\nüõ°Ô∏è <b>–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã:</b>")

            if first_safe:
                safe_start, safe_end = first_safe
                if safe_start <= today <= safe_end:
                    message_parts.append(
                        f"\n   ‚úÖ <b>–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥:</b>\n"
                        f"   –° {format_date_for_user(safe_start, include_weekday=False)}\n"
                        f"   –ü–æ {format_date_for_user(safe_end, include_weekday=False)}"
                    )
                elif safe_end < today and second_safe:
                    # Show only second safe period if first is in the past
                    pass
                else:
                    message_parts.append(
                        f"\n   1Ô∏è‚É£ –° {format_date_for_user(safe_start, include_weekday=False)}\n"
                        f"      –ü–æ {format_date_for_user(safe_end, include_weekday=False)}"
                    )

            if second_safe:
                safe_start, safe_end = second_safe
                if safe_start <= today <= safe_end:
                    message_parts.append(
                        f"\n   ‚úÖ <b>–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥:</b>\n"
                        f"   –° {format_date_for_user(safe_start, include_weekday=False)}\n"
                        f"   –ü–æ {format_date_for_user(safe_end, include_weekday=False)}"
                    )
                elif safe_start > today:
                    days_until_safe = (safe_start - today).days
                    message_parts.append(
                        f"\n   2Ô∏è‚É£ –° {format_date_for_user(safe_start, include_weekday=False)} "
                        f"(—á–µ—Ä–µ–∑ {days_until_safe} –¥–Ω–µ–π)\n"
                        f"      –ü–æ {format_date_for_user(safe_end, include_weekday=False)}"
                    )

        # Add disclaimer
        message_parts.append("\n")
        message_parts.append(
            "\n‚ö†Ô∏è <i>–ü–æ–º–Ω–∏—Ç–µ: –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–¥–µ–∂–Ω—ã–º –º–µ—Ç–æ–¥–æ–º –∫–æ–Ω—Ç—Ä–∞—Ü–µ–ø—Ü–∏–∏. "
            "–†–∞—Å—á–µ—Ç—ã –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã –∏ –º–æ–≥—É—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è.</i>"
        )

        # Add tips based on current phase
        message_parts.append("\n")
        if current_phase['phase'] == 'menstruation':
            message_parts.append(
                "\nüí° <b>–°–æ–≤–µ—Ç:</b> –ë–æ–ª—å—à–µ –æ—Ç–¥—ã—Ö–∞–π—Ç–µ, –ø–µ–π—Ç–µ —Ç–µ–ø–ª—ã–µ –Ω–∞–ø–∏—Ç–∫–∏, "
                "–∏–∑–±–µ–≥–∞–π—Ç–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫."
            )
        elif current_phase['phase'] == 'ovulation':
            message_parts.append(
                "\nüí° <b>–°–æ–≤–µ—Ç:</b> –≠—Ç–æ –Ω–∞–∏–±–æ–ª–µ–µ —Ñ–µ—Ä—Ç–∏–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥. "
                "–ò–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞—á–∞—Ç–∏—è –∏–ª–∏, –Ω–∞–æ–±–æ—Ä–æ—Ç, —Ç—Ä–µ–±—É–µ—Ç –æ—Å–æ–±–æ–π –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏."
            )
        elif current_phase['phase'] == 'pre_menstruation':
            message_parts.append(
                "\nüí° <b>–°–æ–≤–µ—Ç:</b> –í–æ–∑–º–æ–∂–Ω—ã —Å–∏–º–ø—Ç–æ–º—ã –ü–ú–°. "
                "–£–º–µ–Ω—å—à–∏—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–æ–ª–∏ –∏ –∫–æ—Ñ–µ–∏–Ω–∞, –±–æ–ª—å—à–µ —Ä–∞—Å—Å–ª–∞–±–ª—è–π—Ç–µ—Å—å."
            )

        # Join all parts and send
        message = "\n".join(message_parts)
        await update.message.reply_text(
            message,
            parse_mode='HTML'
        )

        logger.info(f"Successfully sent status to user {telegram_id}")

    except Exception as e:
        logger.error(f"Error processing /status command: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ü–∏–∫–ª–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


async def handle_status_inline(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Handle inline status request (from callback query).
    Wrapper for status_command that handles callback queries.

    Args:
        update: Telegram update object
        context: Bot context
    """
    # Answer the callback query first to remove loading animation
    if update.callback_query:
        await update.callback_query.answer()

        # Replace update.message with update.callback_query.message
        # to make it work with callback queries
        update._effective_message = update.callback_query.message

    # Call the main status command
    await status_command(update, context)