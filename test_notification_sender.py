#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (TASK-026).

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –û—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
2. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ notification_log
3. –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
4. Rate limiting (—Å–∏–º—É–ª—è—Ü–∏—è)
"""

import os
import sys
import asyncio
import logging
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, str(Path(__file__).parent / 'src'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()


async def test_notification_functions():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""

    from telegram import Bot
    from notifications.types import NotificationType
    from notifications.sender import (
        send_notification,
        send_test_notification,
        send_notification_sync
    )
    from database.crud import get_user_by_telegram_id, get_user_notification_logs as get_notification_logs
    from database.session import get_db

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    bot_token = os.getenv('BOT_TOKEN')
    if not bot_token:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return

    # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = Bot(token=bot_token)

    # –¢–µ—Å—Ç–æ–≤—ã–π telegram_id (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    test_telegram_id = int(os.getenv('TEST_TELEGRAM_ID', '0'))

    if test_telegram_id == 0:
        logger.error(
            "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TEST_TELEGRAM_ID –≤ .env —Ñ–∞–π–ª–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è "
            "(–≤–∞—à Telegram ID –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)"
        )
        return

    print("\n" + "="*60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô (TASK-026)")
    print("="*60)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    db = next(get_db())
    try:
        user = get_user_by_telegram_id(test_telegram_id, session=db)

        if not user:
            print(f"\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id {test_telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            print("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –±–æ—Ç–µ —á–µ—Ä–µ–∑ /start")
            return

        print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username} (ID: {user.id})")
        print(f"   –ê–∫—Ç–∏–≤–µ–Ω: {user.is_active}")
        print(f"   –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {user.timezone}")

        # –¢–µ—Å—Ç 1: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        print("\nüìß –¢–µ—Å—Ç 1: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
        result = await send_test_notification(
            telegram_id=test_telegram_id,
            notification_type=NotificationType.OVULATION_DAY,
            bot=bot
        )

        if result:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

        # –¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        print("\nüìß –¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ send_notification...")
        result = await send_notification(
            user_id=user.id,
            notification_type=NotificationType.PERIOD_REMINDER,
            bot=bot
        )

        if result:
            print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ notification_log
        print("\nüìù –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ notification_log...")
        logs = get_notification_logs(user_id=user.id, limit=5, session=db)

        if logs:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(logs)} –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–µ:")
            for log in logs:
                print(f"   - {log.notification_type}: {log.status} ({log.sent_at})")
        else:
            print("‚ö†Ô∏è –ó–∞–ø–∏—Å–∏ –≤ notification_log –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        # –¢–µ—Å—Ç 4: –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        print("\nüìß –¢–µ—Å—Ç 4: –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
        result = send_notification_sync(
            user_id=user.id,
            notification_type=NotificationType.FERTILE_WINDOW_START,
            bot=bot
        )

        if result:
            print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏")

        # –¢–µ—Å—Ç 5: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        print("\nüìß –¢–µ—Å—Ç 5: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...")
        result = await send_notification(
            user_id=99999,  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID
            notification_type=NotificationType.PERIOD_START,
            bot=bot
        )

        if not result:
            print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        else:
            print("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —É—Å–ø–µ—Ö –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        print("\n" + "="*60)
        print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        print("="*60)

        print("\n–ü–†–ò–ú–ï–ß–ê–ù–ò–Ø:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π Telegram - –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        print("2. –î–ª—è —Ç–µ—Å—Ç–∞ rate limiting –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥")
        print("3. –î–ª—è —Ç–µ—Å—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ - –∑–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞")

    finally:
        db.close()


async def test_rate_limiting():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ rate limiting (—Ç—Ä–µ–±—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–Ω–æ–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)."""

    from telegram import Bot
    from notifications.types import NotificationType
    from notifications.sender import send_notification
    from database.crud import get_user_by_telegram_id
    from database.session import get_db

    bot_token = os.getenv('BOT_TOKEN')
    test_telegram_id = int(os.getenv('TEST_TELEGRAM_ID', '0'))

    if not bot_token or test_telegram_id == 0:
        logger.error("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ BOT_TOKEN –∏ TEST_TELEGRAM_ID –≤ .env")
        return

    bot = Bot(token=bot_token)
    db = next(get_db())

    try:
        user = get_user_by_telegram_id(test_telegram_id, session=db)
        if not user:
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        print("\n" + "="*60)
        print("–¢–ï–°–¢ RATE LIMITING")
        print("="*60)
        print("–û—Ç–ø—Ä–∞–≤–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—ã–∑–æ–≤–∞ rate limiting...")
        print("(Telegram –º–æ–∂–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–æ—Å–ª–µ ~30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É)")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥
        for i in range(50):
            print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ {i+1}/50...", end=" ")
            result = await send_notification(
                user_id=user.id,
                notification_type=NotificationType.OVULATION_DAY,
                bot=bot
            )
            if result:
                print("‚úÖ")
            else:
                print("‚ùå")

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ —Å–ª–∏—à–∫–æ–º —Å–ø–∞–º–∏—Ç—å
            await asyncio.sleep(0.1)

        print("\n–¢–µ—Å—Ç rate limiting –∑–∞–≤–µ—Ä—à—ë–Ω")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ rate limiting –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö")

    finally:
        db.close()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""

    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:")
    print("1. –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    print("2. –¢–µ—Å—Ç rate limiting (–æ—Ç–ø—Ä–∞–≤–∏—Ç –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π)")

    choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-2): ").strip()

    if choice == '1':
        asyncio.run(test_notification_functions())
    elif choice == '2':
        confirm = input(
            "\n‚ö†Ô∏è –≠—Ç–æ—Ç —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç ~50 —Å–æ–æ–±—â–µ–Ω–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): "
        ).strip().lower()
        if confirm == 'y':
            asyncio.run(test_rate_limiting())
        else:
            print("–¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ë–Ω")
    else:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


if __name__ == "__main__":
    main()