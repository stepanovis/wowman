"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
–§–æ–∫—É—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
"""

import unittest
from datetime import datetime, date, time, timedelta
from unittest.mock import Mock, MagicMock, patch
import pytz

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
from src.notifications.types import (
    NotificationType,
    get_notification_message,
    get_notification_offset,
    get_notification_display_name,
    get_notification_emoji,
    calculate_notification_datetime as calc_notification_datetime_types
)


class TestNotificationTypes(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""

    def test_notification_types_exist(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã."""
        expected_types = [
            'PERIOD_REMINDER',
            'PERIOD_START',
            'FERTILE_WINDOW_START',
            'OVULATION_DAY',
            'SAFE_PERIOD'
        ]

        for type_name in expected_types:
            self.assertTrue(hasattr(NotificationType, type_name))
            self.assertIsNotNone(getattr(NotificationType, type_name))

    def test_get_notification_message(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        for notification_type in NotificationType:
            text = get_notification_message(notification_type)
            self.assertIsNotNone(text)
            self.assertIsInstance(text, str)
            self.assertGreater(len(text), 0)

    def test_get_notification_offset(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º PERIOD_REMINDER - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞ 2 –¥–Ω—è –¥–æ
        offset = get_notification_offset(NotificationType.PERIOD_REMINDER)
        self.assertEqual(offset, timedelta(days=-2))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–µ–Ω—å —Å–æ–±—ã—Ç–∏—è
        for nt in [NotificationType.PERIOD_START, NotificationType.OVULATION_DAY]:
            offset = get_notification_offset(nt)
            self.assertEqual(offset, timedelta(days=0))

    def test_get_notification_display_name(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏."""
        for notification_type in NotificationType:
            name = get_notification_display_name(notification_type)
            self.assertIsNotNone(name)
            self.assertIsInstance(name, str)
            self.assertGreater(len(name), 0)

    def test_get_notification_emoji(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏."""
        emoji_map = {
            NotificationType.PERIOD_REMINDER: "üîî",
            NotificationType.PERIOD_START: "ü©∏",
            NotificationType.FERTILE_WINDOW_START: "üå∏",
            NotificationType.OVULATION_DAY: "üéØ",
            NotificationType.SAFE_PERIOD: "‚úÖ"
        }

        for notification_type, expected_emoji in emoji_map.items():
            emoji = get_notification_emoji(notification_type)
            self.assertEqual(emoji, expected_emoji)


class TestNotificationDateTimeCalculation(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –º–æ–¥—É–ª—è types."""

    def test_calculate_notification_datetime_from_types(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ calculate_notification_datetime –∏–∑ –º–æ–¥—É–ª—è types."""
        event_date = date(2025, 10, 15)

        # –¢–µ—Å—Ç —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
        result = calc_notification_datetime_types(
            event_date,
            NotificationType.PERIOD_REMINDER
        )

        # PERIOD_REMINDER –∏–º–µ–µ—Ç —Å–º–µ—â–µ–Ω–∏–µ -2 –¥–Ω—è
        expected_date = date(2025, 10, 13)
        self.assertEqual(result.date(), expected_date)
        self.assertEqual(result.time(), time(9, 0))  # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –≤—Ä–µ–º—è

    def test_calculate_notification_datetime_with_custom_time(self):
        """–¢–µ—Å—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º."""
        event_date = date(2025, 10, 15)
        custom_time = {'hour': 14, 'minute': 30}

        result = calc_notification_datetime_types(
            event_date,
            NotificationType.OVULATION_DAY,
            custom_time
        )

        # OVULATION_DAY –∏–º–µ–µ—Ç —Å–º–µ—â–µ–Ω–∏–µ 0 –¥–Ω–µ–π
        self.assertEqual(result.date(), event_date)
        self.assertEqual(result.time(), time(14, 30))


class TestSchedulerUtilsBasic(unittest.TestCase):
    """–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —É—Ç–∏–ª–∏—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""

    @patch('src.notifications.scheduler_utils.datetime')
    def test_calculate_notification_datetime(self, mock_datetime):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ datetime —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞."""
        from src.notifications.scheduler_utils import calculate_notification_datetime

        base_date = date(2025, 10, 1)
        default_time = time(9, 0)
        timezone = 'Europe/Moscow'

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è datetime.combine
        mock_datetime.combine = datetime.combine

        result = calculate_notification_datetime(
            base_date, default_time, timezone
        )

        self.assertIsInstance(result, datetime)
        self.assertEqual(result.date(), base_date)
        self.assertEqual(result.time(), default_time)
        self.assertEqual(result.tzinfo, pytz.timezone(timezone))


class TestNotificationJobIds(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ID –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""

    def test_calculate_and_parse_job_id(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ ID –∑–∞–¥–∞—á–∏."""
        from src.notifications.scheduler_utils import (
            calculate_notification_job_id,
            parse_notification_job_id
        )

        user_id = 123
        notification_type = NotificationType.OVULATION_DAY

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID
        job_id = calculate_notification_job_id(user_id, notification_type)

        self.assertIsInstance(job_id, str)
        self.assertIn(str(user_id), job_id)
        self.assertIn(notification_type.value, job_id)

        # –ü–∞—Ä—Å–∏–º –æ–±—Ä–∞—Ç–Ω–æ
        parsed_user_id, parsed_type = parse_notification_job_id(job_id)

        self.assertEqual(parsed_user_id, user_id)
        self.assertEqual(parsed_type, notification_type)


class TestSchedulerClass(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ NotificationScheduler."""

    @patch('src.notifications.scheduler.AsyncIOScheduler')
    @patch('src.notifications.scheduler.SQLAlchemyJobStore')
    def test_scheduler_initialization(self, mock_jobstore, mock_scheduler_class):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        from src.notifications.scheduler import NotificationScheduler

        mock_scheduler = Mock()
        mock_scheduler_class.return_value = mock_scheduler

        bot = Mock()
        scheduler = NotificationScheduler(bot)

        self.assertIsNotNone(scheduler.scheduler)
        self.assertEqual(scheduler.bot, bot)
        mock_scheduler_class.assert_called_once()

    @patch('src.notifications.scheduler.AsyncIOScheduler')
    def test_add_notification_job(self, mock_scheduler_class):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        from src.notifications.scheduler import NotificationScheduler

        mock_scheduler = Mock()
        mock_scheduler_class.return_value = mock_scheduler

        bot = Mock()
        scheduler = NotificationScheduler(bot)

        user_id = 123
        notification_type = NotificationType.PERIOD_REMINDER
        run_date = datetime.now() + timedelta(days=1)

        scheduler.add_notification_job(user_id, notification_type, run_date)

        mock_scheduler.add_job.assert_called_once()
        args, kwargs = mock_scheduler.add_job.call_args

        self.assertEqual(kwargs['trigger'], 'date')
        self.assertEqual(kwargs['run_date'], run_date)
        self.assertIn(str(user_id), kwargs['id'])

    @patch('src.notifications.scheduler.AsyncIOScheduler')
    def test_remove_user_jobs(self, mock_scheduler_class):
        """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        from src.notifications.scheduler import NotificationScheduler

        mock_scheduler = Mock()
        mock_scheduler_class.return_value = mock_scheduler

        user_id = 123

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        job1 = Mock()
        job1.id = f"notification_{user_id}_OVULATION_DAY"
        job2 = Mock()
        job2.id = f"notification_{user_id}_PERIOD_REMINDER"
        job3 = Mock()
        job3.id = "notification_456_OVULATION_DAY"  # –î—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

        mock_scheduler.get_jobs.return_value = [job1, job2, job3]

        bot = Mock()
        scheduler = NotificationScheduler(bot)
        scheduler.remove_user_jobs(user_id)

        # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 123
        self.assertEqual(mock_scheduler.remove_job.call_count, 2)


if __name__ == '__main__':
    unittest.main()